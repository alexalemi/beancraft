# Compute the day of week using Sakamoto's method
# 
# dayofweek(y, m, d)  /* 1 <= m <= 12, y > 1752 */
# {
#   static int t[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
#   if ( m < 3 )
#   {
#      y -= 1;
#   }
#   return (y + y/4 - y/100 + y/400 + t[m-1] + d) % 7;
#}

deb Out next self
deb tmp next self
deb tmp2 next self
copyMonth: deb Month refillMonth
inc tmp
inc tmp2 copyMonth
refillMonth: deb tmp2 checkMonth
inc Month prev

# check if m < 3
checkMonth: deb tmp decYear
deb tmp decYear
deb tmp decYear terms

decYear: deb Year terms terms

terms: deb sum y self
# +y
y: use "copy" From=Year To=sum tmp=tmp2

# leap: y/4
leapStart: deb tmp next self
deb tmp2 next self
use "copy" From=Year To=tmp tmp=tmp2
use "div" Dividend=tmp Divisor=4
use "copy" From=Quotient To=sum tmp=tmp2

# century: -y/100  
centuryStart: deb tmp next self
use "copy" From=Year To=tmp tmp=tmp2
use "div" Dividend=tmp Divisor=100
centuryLoop: deb Quotient FourhundredStart
deb sum halt centuryLoop

# Four hundred year correction: +y/400
FourhundredStart: deb tmp next self
use "copy" From=Year To=tmp tmp=tmp2
use "div" Dividend=tmp Divisor=400
use "copy" From=Quotient To=sum tmp=tmp2

lookupStart: deb Month halt
deb Month day
deb Month lookup3
deb Month lookup2
deb Month lookup5
deb Month day
deb Month lookup3
deb Month lookup5
deb Month lookup1
deb Month lookup4
deb Month lookup6
deb Month lookup2
deb Month lookup4

lookup6: inc sum
lookup5: inc sum
lookup4: inc sum
lookup3: inc sum
lookup2: inc sum
lookup1: inc sum

day: use "copy" From=Day To=sum tmp=tmp2

# modulo 7
modout: deb sum out0
deb sum out1
deb sum out2
deb sum out3
deb sum out4
deb sum out5
deb sum out6 modout

out6: inc Out
out5: inc Out
out4: inc Out
out3: inc Out
out2: inc Out
out1: inc Out
out0: end